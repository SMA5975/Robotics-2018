package org.usfirst.frc.team5975.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.VictorSP;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
//import edu.wpi.first.wpilibj.ADXRS450_Gyro;
//import com.qualcomm.robotcore.hardware.GyroSensor;
//import edu.wpi.first.wpilibj.Timer;


public class Robot extends IterativeRobot {
	RobotDrive myRobot;
	//double Kp = 0.03;
	//ADXRS450_Gyro gyro;
	RobotDrive intakeMotor;
	VictorSP liftMotor;
	VictorSP leftMotor;
	VictorSP rightMotor;
	VictorSP rightIntakeMotor;
	VictorSP leftIntakeMotor;
	
	// RoboRio mapping
	int leftMotorChannel=1;
	int rightMotorChannel=2;
	int liftMotorChannel=3;
	int rightIntakeChannel=4;
	int leftIntakeChannel=5;
	int analogGyroChannel=0;
	AnalogInput magnetInput;
	DriverStation ds = DriverStation.getInstance();

	
	// Driver Station / controller mapping
	int joyPort1=0; //driver xbox controller
	int joyPort2=1; //manipulator xbox controller
	
	//Driver Controls
	int lTriggerID = 2;
	int rTriggerID = 3;
	int leftDriveStickID = 1; //left and right sticks are joysticks (axis)
	int rightDriveStickID = 5;
	int halfSpeedButtonID = 5; //half-speed button
	int turboButtonID = 6; //turbo button
	Joystick youDriveMeCrazzy;
	Joystick youManipulateMyHeart;
	
	//Manipulator Controls
	int intakeCubeID = 2; //left Trigger
	int ejectCubeID = 3; //right Trigger
	int descendLiftID = 5; //left Bumper
	int ascendLiftID = 6; //right Bumper
	int rightStickID = 5; //right joystick (axis)
	
	//Driver stations
	int positionNumber = 1;
	int station1 = 1; //leftmost station
	int station2 = 2; //center station
	int station3 = 3; //rightmost station
	
	//verify that stick1 and stick2 correspond to the left and right joysticks on the controller
	//6 is right, 5 is left
	 
	//global variables
	int forwardLimit;
	int rightTurnLimit;
	int leftTurnLimit;
	int moveCounter;
	int moveLimit;
	int moveLeftLimit;
	int moveRightLimit;
	double driveLeft;
	double driveRight;
	int rotationCounter;
	int turnLimit;
	int moveToPegLimit;
	boolean scaleGamePiece;
	boolean closeSwitchPiece;
	boolean farSwitchPiece;
	//for field pieces, right is true, left is false
	
	//Limits
	double turboSpeedLimit = 0.9;
	double halfSpeedLimit = 0.5;
	double normalMode = 0.7; 
	double liftSpeed = 0.8; //this is slowed because there are no limit switches on the lift
	double downSpeed = 0.4; //don't put a negative, it will make the lift drop faster
	double liftStop = 0.5; //this is the value that stops the lift
	
	//IO pin mapping (copied from 2015 code)
	int upperLimitPin=1;
	int lowerLimitPin=2;
	
	//Digital inputs (copied from 2015 code)
	DigitalInput upperLimit;
	DigitalInput lowerLimit;

	boolean upperBtnState = false;
	boolean lowerBtnState = false;

	double speedLimitFactor = 0.8;

	boolean upperFlag = false;
	boolean lowerFlag = false;

	int autoStage = 0;
	
	double downCount = 0; //count of how long we hold down the downLift button
	
    public void robotInit() {
    	System.out.println("working init");
    	leftMotor = new VictorSP(leftMotorChannel);
    	rightMotor = new VictorSP(rightMotorChannel);
    	leftMotor.setInverted(false);
    	rightMotor.setInverted(false);
    	
    	leftIntakeMotor = new VictorSP(leftIntakeChannel);
    	rightIntakeMotor = new VictorSP(rightIntakeChannel);
    	leftIntakeMotor.setInverted(true); 
    	intakeMotor = new RobotDrive(leftIntakeMotor, rightIntakeMotor);
   
    	myRobot = new RobotDrive(leftMotor,rightMotor);
   
    	youDriveMeCrazzy  = new Joystick(joyPort1);
    	youManipulateMyHeart = new Joystick(joyPort2);
    	
    	liftMotor = new VictorSP(liftMotorChannel);
    	
    	//copied from 2015 code
    	upperLimit = new DigitalInput(upperLimitPin);
    	lowerLimit = new DigitalInput(lowerLimitPin);
    	
    	NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
    	NetworkTableEntry tx = table.getEntry("tx");
    	NetworkTableEntry ty = table.getEntry("ty");
    	NetworkTableEntry ta = table.getEntry("ta");
    	double x = tx.getDouble(0);
    	double y = ty.getDouble(0);
    	double area = ta.getDouble(0);
    	
    	 magnetInput= new AnalogInput (0);
    	
    	
    }
    
    public void autonomousInit() {
    	moveCounter = 0;
    	autoStage = 0;
    //	gyro = new ADXRS450_Gyro(SPI.Port.kOnboardCS0); // Gyro on Analog Channel 0
    //	gyro.reset();

    	moveLimit = 270;
        forwardLimit = 10;
        moveLeftLimit = 100;
        moveRightLimit = 100; 
        rightTurnLimit = 65;
        leftTurnLimit = 67;
        
    	driveLeft = 0.9;
    	driveRight = 0.9;
    	
    	positionNumber = station2;
    	
    	String gameData;
		gameData = DriverStation.getInstance().getGameSpecificMessage();

		if(gameData.charAt(0) == 'L') {//switch closest to our robot, determining whether our team color is on the left or right
			closeSwitchPiece = false;//Left
		} else {
			closeSwitchPiece = true;//Right
		}
		
		if(gameData.charAt(1) == 'L') {//telling which color our side is on the big scale
			scaleGamePiece = false;//Left
		} else {
			scaleGamePiece = true;//Right
		}
		
		if(gameData.charAt(2) == 'L') {//switch farthest from our robot, determining whether our team color is on the left or right
			farSwitchPiece = false;//Left
		} else {
			farSwitchPiece = true;//Right
		}
		//DriverStation ds =
		//DriverStation.getInstance();
		//ds.someMethod();
		
		//DriverStation.getinstance.someMethod();
    }

    public void autonomousPeriodic() {
    	//double angle = gyro.getAngle(); // get current heading
    	//System.out.println("Gyro sensor is working:"+ angle );
    	
    	System.out.println(moveCounter);
    		//positionNumber must be 1 or 3, 2 not supported as you have to turn
    	if ((positionNumber == station1) || (positionNumber == station3)) {
    		if (moveCounter < moveLimit) {
    			moveCounter++;
    			//first number is speed
    			//bigger the number for curve (second parameter) the more left it will turn
    			myRobot.drive(0.3, 0.0);
    			System.out.println("station 1 check");
    		}
    	} else if ((closeSwitchPiece == true) && (positionNumber == station2)) {
    		if (autoStage == 0) { 
    			// go forward
    			if (moveCounter < forwardLimit) {
    				myRobot.drive(0.3, 0.0); 
    				moveCounter++;	
    				System.out.println("outprint check");
    			} else { 
    				autoStage = 1; 
    				moveCounter = 0;
    				System.out.println("hit else statement of stage 0");
    			} 
    		} else if (autoStage == 1) { 
    			// turn 90 degrees right
    			System.out.println("hit stage 1");
    			if (moveCounter < rightTurnLimit) { 
    				myRobot.drive(0.3, 0.5); 
    				moveCounter++; 
    			} else { 
    				autoStage = 2; 
    				moveCounter = 0;
    			} 
    		} else if (autoStage == 2) { 
    			// go forward
    			System.out.println("hit stage 2");
    			if (moveCounter < moveRightLimit) {   
    				myRobot.drive(0.3, 0.0); 
    				moveCounter++; 
    			} else {
    				autoStage = 3;
    				moveCounter = 0;
    			}
    		} else if (autoStage == 3) { 
    			// turn 90 degrees left
    			System.out.println("hit stage 3");
    			if (moveCounter < leftTurnLimit) {   
    				myRobot.drive(0.3, -0.5); //this is will have to change because of the dead motor
    				moveCounter++; 
    			} else { 
    				autoStage = 4; 
    				moveCounter = 0;
    			} 
    		} else if (autoStage == 4) { 
    			// go forward
    			System.out.println("hit stage 4");
    			if (moveCounter < forwardLimit) { 
    				myRobot.drive(0.3, 0.0); 
    				moveCounter++; 
    			}
    		} else { 
    			System.out.println("THERE IS NOW AN OUTPRINT IN STAGE 5 -Sammy");
    			myRobot.drive(0.0, 0.0); 	// stop robot 
    		} 
    	
    	} else if ((closeSwitchPiece == false) && (positionNumber == station2)) {
    		System.out.println("going left");
    		if (autoStage == 0) { //different auto
			// go forward
    			if (moveCounter < forwardLimit) {
    				myRobot.drive(0.3, 0.0); 
    				moveCounter++;	
    				System.out.println("outprint check");
    			} else { 
    				autoStage = 1; 
    				moveCounter = 0;
    				System.out.println("hit else statement of stage 0");
    			} 
    		} 	else if (autoStage == 1) { 
			// turn 90 degrees left
    			System.out.println("hit left stage 1");
    			if (moveCounter < leftTurnLimit) { 
    				myRobot.drive(0.3, -0.5); 
    				moveCounter++; 
    			} else { 
    				autoStage = 2; 
    				moveCounter = 0;
    			} 
    		} else if (autoStage == 2) { 
			// go forward
    			System.out.println("hit left stage 2");
    			if (moveCounter < moveLeftLimit) {   
    				myRobot.drive(0.2, 0.0); 
    				moveCounter++; 
    			} 
    			else {
    				autoStage = 3;
    				moveCounter = 0;
    			}
    		} else if (autoStage == 3) { 
			// turn 90 degrees right
    			System.out.println("hit left stage 3");
    			if (moveCounter < rightTurnLimit) {   
    				myRobot.drive(0.3, 0.5); //this is will have to change because of the dead motor
    				moveCounter++; 
    			} else { 
    				autoStage = 4; 
    				moveCounter = 0;
    			} 
    		} else if (autoStage == 4) { 
			// go forward
    			System.out.println("hit left stage 4");
    			if (moveCounter < forwardLimit) { 
    				myRobot.drive(0.3, 0.0); 
    				moveCounter++; 
    			}
    		} else { 
    			System.out.println("THERE IS NOW AN OUTPRINT IN STAGE 5 (left) -Sammy");
    			myRobot.drive(0.0, 0.0); 	// stop robot 
    		} 
    	}
    }
    
   
    
    	
    public void teleopInit() {
    	rotationCounter = 0;
    }
    
    public void teleopPeriodic() {
    	double currentValue = magnetInput.getVoltage();
    	int scale = 10;
    	int start = 0;
    	for(int i = start; i < currentValue*scale; i++)
    	{
    		System.out.print("=");
    	}
    	
    //drive 
    	double rightAxis = -youDriveMeCrazzy.getRawAxis(rightDriveStickID);
    	double leftAxis = -youDriveMeCrazzy.getRawAxis(leftDriveStickID);
    
    	leftAxis = limitAxis(leftAxis);
    	rightAxis = limitAxis(rightAxis);
    	
    	leftAxis = limitSpeed(leftAxis);
    	rightAxis = limitSpeed(rightAxis);
    
    	myRobot.tankDrive(leftAxis, rightAxis);
    	
    //lift drive
    	double elevatorAxis = -youManipulateMyHeart.getRawAxis(rightStickID);
    
    	elevatorAxis = limitAxis(elevatorAxis);
    	elevatorAxis = limitSpeed(leftAxis);
 
    	moveLift(elevatorAxis);
    	
    	moveIntake();
    }
    	
    private double limitAxis (double axis) {
    	if (axis > 1.0)
    	    axis = 1.0;
    	else if (axis < -1.0)
    		axis = -1.0;

    	return axis;
    }
    
    //drive
    private double limitSpeed (double axis) {
    	
    	axis = axis * axis * axis;
    	
    	if(youDriveMeCrazzy.getRawButton(halfSpeedButtonID) == true) {
    		axis = axis * halfSpeedLimit;
    		System.out.println("Extremely Slow mode");
    	} //this is the right button
    	
    	else if(youDriveMeCrazzy.getRawButton(turboButtonID) == true) {
    		axis = axis * turboSpeedLimit;
    		System.out.println("Turbo mode");
    	} else { //this is the left button
    		 axis = axis * normalMode;
    	}
    	return axis;
    }
  
    public double getElevator(double elevatorAxis) {  // read trigger buttons and create the axis value
    	double motorSpeed = 0;
    	
    	if (elevatorAxis > 0) { //when the value comes back greater than zero, move lift up
    		motorSpeed = liftSpeed;
    	} else if (elevatorAxis == 0) { //when the value is equal to zero stay at a constant speed
    		motorSpeed = liftStop;
    	} else {
    		motorSpeed = downSpeed; //when the value is below than zero, move lift down
    	}
    	return motorSpeed;
    }

    public void moveLift(double elevatorAxis) {
    	 final double lowerLimitMotor = 0.0; //final means the number cannot be changed 
    	 final double upperLimitMotor = liftStop; //liftStop is the value at which keep the lift stable

    	 upperBtnState = upperLimit.get();
    	 lowerBtnState = lowerLimit.get();
    	 double motorSpeed = getElevator(elevatorAxis); //check with syd
    	 //getting the speed that the lift motor is moving

    	 if(elevatorAxis < 0 && upperBtnState == false) { //preventing us from getting stuck at the upper limit
    		 liftMotor.set(upperLimitMotor);
    		 lowerFlag = true;
    		 System.out.println("Hit upper limit");
    	 } else if(elevatorAxis > 0 && lowerBtnState == false) { //preventing us from getting stuck at the lower limit
    		 liftMotor.set(lowerLimitMotor);
    		 upperFlag = true;
    		 System.out.println("Hit lower limit");
    	 } else {
    		 liftMotor.set(elevatorAxis);
    		// System.out.println("moving lift " + elevatorAxis);
    		 if(lowerFlag == true && elevatorAxis > 0) {
    			 lowerFlag = false;
    		 } else if(upperFlag == true && elevatorAxis < 0){
    			 upperFlag = false;
    		 }
    	 }
    } 
 
    public void moveIntake() {
    	double motorSpeed =  -youManipulateMyHeart.getRawAxis(intakeCubeID); // reverse one axis to act as an eject button
    	double myRAxis =  youManipulateMyHeart.getRawAxis(ejectCubeID);

    	double intakeValue = limitAxis(motorSpeed + myRAxis);
    	intakeMotor.drive(intakeValue,0);
    }
}
/*
	im walkin here - isabelle
	
	get in the van - isabelle
 */
